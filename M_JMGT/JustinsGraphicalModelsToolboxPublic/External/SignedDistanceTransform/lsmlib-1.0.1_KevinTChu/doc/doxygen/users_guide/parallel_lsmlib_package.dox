
/*!
  @page users_guide_parallel_lsmlib_package Parallel LSMLIB Package

<hr>
<center>
<table border="0">
<tr>
<td width="15%" align="left">
@ref users_guide_serial_lsmlib_package "Previous" 
</td>
<td width="70%" align="center">
@ref lsmlib_users_guide "Table of Contents"
</td>
<td width="15%" align="right">
@ref users_guide_lsmlib_matlab_toolbox "Next" 
</td>
</tr>
</table>
</center>


<hr>
\section parallel_introduction Introduction
The Parallel LSMLIB Package provides support for carrying out 
level set method calculations on distributed memory, parallel computing
architectures (such as Beowulf clusters).  
It is a C++ library that is based on the 
@ref users_guide_lsmlib_toolbox_package "LSMLIB Toolbox Package"
and the <a href="http://www.llnl.gov/CASC/SAMRAI">Structured 
Adaptive Mesh Refinement Application Infrastructure (SAMRAI)</a> developed 
in the <a href="http://www.llnl.gov/CASC">Center for Applied Scientific 
Computing (CASC)</a> at <a href="http://www.llnl.gov">Lawrence Livermore 
National Laboratory</a>.  The decision to leverage 
<a href="http://www.llnl.gov/CASC/SAMRAI">SAMRAI</a> for the Level Set Method 
Library was made because <a href="http://www.llnl.gov/CASC/SAMRAI">SAMRAI</a> 
was specifically designed to address several key issues:

  - manage parallelism,
  - handle structured, adaptive mesh refinement, and
  - provide restart capabilities.

A major design goal of <a href="http://www.llnl.gov/CASC/SAMRAI">SAMRAI</a> 
was to provide support for each of these features in a scalable manner.  
Furthermore, the API for <a href="http://www.llnl.gov/CASC/SAMRAI">SAMRAI</a> 
was designed to shield the application developer from the tedious bookkeeping
and memory management involved in writing code for parallel, structured
adaptive mesh refinement applications.  We have taken advantage of these 
features to make LSMLIB a high-performance, scalable, parallel (and eventually 
adaptive) level set method library.
 

<hr>
\section parallel_usage Usage
The Parallel LSMLIB Package has been designed to be useable with minimal 
user effort.  The simplest way to develop a level set method simulation 
based on the parallel level set method package is to make use of 
the @ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" class and 
provide problem specific initialization, boundary conditions, and velocity 
field calculations by implementing concrete subclasses of the 
@ref LSMLIB::LevelSetMethodPatchStrategy "LevelSetMethodPatchStrategy" and 
@ref LSMLIB::LevelSetMethodVelocityFieldStrategy 
"LevelSetMethodVelocityFieldStrategy" abstract base classes.
Once these concrete subclasses have been implemented, a level set
method calculation can be carried out as follows:

  -# Create a @ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" 
     object using the constructor that takes pointers to 
     @ref LSMLIB::LevelSetMethodVelocityFieldStrategy 
     "LevelSetMethodVelocityFieldStrategy" and
     @ref LSMLIB::LevelSetMethodPatchStrategy "LevelSetMethodPatchStrategy" 
     objects as arguments.  Pass pointers to instances of the concrete 
     subclasses for these arguments.
  -# Begin the level set method calculation by invoking the
     @ref LSMLIB::LevelSetMethodAlgorithm::initializeLevelSetMethodCalculation
     "LevelSetMethodAlgorithm::initializeLevelSetMethodCalculation()"
     method.  This will initialize the data on the PatchHierarchy.
  -# Integrate the level set functions in time by invoking the
     @ref LSMLIB::LevelSetMethodAlgorithm::advanceLevelSetFunctions
     "LevelSetMethodAlgorithm::advanceLevelSetFunctions()" method.
     Stable time step sizes can be computed for each time step using
     the @ref LSMLIB::LevelSetMethodAlgorithm::computeStableDt() 
     "LevelSetMethodAlgorithm::computeStableDt()" method.
  -# Access level set function data and other integration data
     through several accessor method such as 
     @ref LSMLIB::LevelSetMethodAlgorithm::getPhiPatchDataHandle
     "getPhiPatchDataHandle()", 
     @ref LSMLIB::LevelSetMethodAlgorithm::getStartTime "getStartTime()", 
     etc.  These methods are documented in the 
     @ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" 
     class header file.

Example parallel level set method simulations implemented using this procedure
are provided in the examples/parallel directory.  For details on how to 
use the @ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" 
class, see any of the main() programs.  For details on how to access data 
in a SAMRAI PatchHierarchy, pay special attention to the 
TestLSM_2d_VelocityFieldModule and TestLSM_2d_PatchModule 
classes.  In particular, the following methods demonstrate the typical
way to access data: 

  TestLSM_2d_VelocityFieldModule::computeVelocityFieldOnLevel()
  TestLSM_2d_PatchModule::initializeLevelSetFunctionsOnPatch()

These methods also illustrate how to interface C/C++ and Fortran code.
It should be emphasized, that there it is NOT necessary that the numerical
kernels be implemented in Fortran.  To carry out the same computation
in C/C++, it is straightforward to access the data in the arrays and
compute positions by using the bounding box and geometry information. 
However, it is ESSENTIAL that the data arrays be stored and accessed in
Fortran order (i.e. column-major order).

For more details about the
@ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" (particularly, 
advanced ways to use it), see the 
@ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" class header
file.


<hr>
\section parallel_initialization Initializing the Level Set Functions
<strong>Under development...</strong>


<hr>
\section parallel_velocity_field Setting the Velocity Field
<strong>Under development...</strong>


<hr>
\section parallel_input Input Parameters
The @ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm" 
accepts many input parameters that may be used to control the level set 
method calculation.  These are passed into the level set method application 
program through an input file with the following format:

<pre>
InputDatabase1 {
  input_parameter1 = 1
  ...
}

InputDatabase2 {
  SubDatabase1 {
    ...
  }
  SubDatabase2 {
    ...
  }
}

</pre>

Note the nested structure of the database.  White spaces do not 
matter.  The input parameters for the 
@ref LSMLIB::LevelSetMethodAlgorithm "LevelSetMethodAlgorithm"
are described in detail in the class header file.  As an example,
see the @ref sample_input_file or the input files contained 
in the examples/parallel/ directory.


<hr>
\section parallel_timestep_size Using a Custom Stable Timestep Size
<strong>Under development...</strong>


<hr>
\section parallel_notes NOTES

- The naming conventions used in the parallel level set method package
  are based on common object-oriented design patterns.  For more details, 
  please refer to "Design Patterns: Elements of Reusable Object-Oriented 
  Software" by E. Gamma, R. Helm, R. Johnson, and J. Vlissides.

<hr>
<center>
<table border="0">
<tr>
<td width="15%" align="left">
@ref users_guide_serial_lsmlib_package "Previous" 
</td>
<td width="70%" align="center">
@ref lsmlib_users_guide "Table of Contents"
</td>
<td width="15%" align="right">
@ref users_guide_lsmlib_matlab_toolbox "Next" 
</td>
</tr>
</table>
</center>

*/
