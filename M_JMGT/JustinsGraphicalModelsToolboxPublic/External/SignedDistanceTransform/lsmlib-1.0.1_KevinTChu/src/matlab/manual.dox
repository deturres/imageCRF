/*
 * File:        manual.dox
 * Package:     LSMLIB Doxygen manual
 * Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
 *                  Regents of the University of Texas.  All rights reserved.
 *              (c) 2009 Kevin T. Chu.  All rights reserved.
 * Revision:    $Revision: 149 $
 * Modified:    $Date: 2009-01-18 00:31:09 -0800 (Sun, 18 Jan 2009) $
 * Description: Generation of LSMLIB Doxygen source code manual
 */

namespace LSMLIB {

/*!
  @page package_lsm_matlab LSMLIB MATLAB Toolbox

  LSMLIB provides a MATLAB interface for several of the basic components 
  of the level set method algorithm.  Specifically, the LSMLIB MATLAB 
  package currently provides routines for:
  
  - time evolution of level set functions;
  - calculation of high-order ENO/WENO spatial derivatives;
  - TVD Runge-Kutta time integration; and
  - computation of the distance function and extension fields
    using fast marching methods.


  <h3> Time Evolution of Level Set Functions </h3>

  MATLAB functions are provided for evolving the level set functions
  in time using user-supplied velocity fields.

  <center>
  <table>
  <tr align="center" valign="middle">
  <th>1st-order</th>
  <th>2nd-order</th>
  <th>3rd-order</th>
  </tr>
  <tr align="center" valign="middle">
  <td>advancePhiTVDRK1</td>
  <td>advancePhiTVDRK2_Stage1</td>
  <td>advancePhiTVDRK3_Stage1</td>
  </tr>
  <tr align="center" valign="middle">
  <td></td>
  <td>advancePhiTVDRK2_Stage2</td>
  <td>advancePhiTVDRK3_Stage2</td>
  </tr>
  <tr align="center" valign="middle">
  <td></td>
  <td></td>
  <td>advancePhiTVDRK3_Stage3</td>
  </tr>
  </table>
  </center>

  In addition, the COMPUTE_NORMAL_VELOCITY_TERM_FOR_LSE_RHS_2D() and
  COMPUTE_NORMAL_VELOCITY_TERM_FOR_LSE_RHS_3D() functions are available
  if there is any need to explicitly compute the right-hand side of the
  level set evolution equation when a velocity in the normal direction
  is supplied.

  <h3> High-order Spatial Derivatives </h3>

  MATLAB functions are provided for computing spatial derivatives using the 
  following high-order spatial discretizations: HJ-ENO1, HJ-ENO2, HJ-ENO3, and 
  HJ-WENO5.  These functions are made available via MEX wrappers for the 
  numerical kernels in the @ref package_lsm_toolbox "Toolbox" package.   

  <center>
  <table>
  <tr align="center" valign="middle">
  <th>1D</th>
  <th>2D</th>
  <th>3D</th>
  </tr>
  <tr align="center" valign="middle">
  <td>UPWIND_HJ_ENO1_1D</td>
  <td>UPWIND_HJ_ENO1_2D</td>
  <td>UPWIND_HJ_ENO1_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>UPWIND_HJ_ENO2_1D</td>
  <td>UPWIND_HJ_ENO2_2D</td>
  <td>UPWIND_HJ_ENO2_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>UPWIND_HJ_ENO3_1D</td>
  <td>UPWIND_HJ_ENO3_2D</td>
  <td>UPWIND_HJ_ENO3_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>UPWIND_HJ_WENO5_1D</td>
  <td>UPWIND_HJ_WENO5_2D</td>
  <td>UPWIND_HJ_WENO5_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>HJ_ENO1_1D</td>
  <td>HJ_ENO1_2D</td>
  <td>HJ_ENO1_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>HJ_ENO2_1D</td>
  <td>HJ_ENO2_2D</td>
  <td>HJ_ENO2_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>HJ_ENO3_1D</td>
  <td>HJ_ENO3_2D</td>
  <td>HJ_ENO3_3D</td>
  </tr>
  <tr align="center" valign="middle">
  <td>HJ_WENO5_1D</td>
  <td>HJ_WENO5_2D</td>
  <td>HJ_WENO5_3D</td>
  </tr>
  </table>
  </center>

  <h3> Total Variation Diminishing Runge-Kutta Time Integration </h3>

  MATLAB functions are provided for advancing the level set functions
  in time using first-, second-, or third-order TVD Runge-Kutta schemes.

  <center>
  <table>
  <tr align="center" valign="middle">
  <th>1st-order</th>
  <th>2nd-order</th>
  <th>3rd-order</th>
  </tr>
  <tr align="center" valign="middle">
  <td>TVD_RK1_STEP</td>
  <td>TVD_RK2_STAGE1</td>
  <td>TVD_RK3_STAGE1</td>
  </tr>
  <tr align="center" valign="middle">
  <td></td>
  <td>TVD_RK2_STAGE2</td>
  <td>TVD_RK3_STAGE2</td>
  </tr>
  <tr align="center" valign="middle">
  <td></td>
  <td></td>
  <td>TVD_RK3_STAGE3</td>
  </tr>
  </table>
  </center>


  <h3> Reinitialization </h3>

  MATLAB functions are provided for reinitialization of level set functions
  to be signed distance functions.

  <center>
  <table>
  <tr align="center" valign="middle">
  <th>2D</th>
  <th>3D
  </tr>
  <tr align="center" valign="middle">
  <td>reinitializeLevelSetFunction</td>
  <td>reinitializeLevelSetFunction</td>
  </tr>
  </table>
  </center>


  <h3> Fast Marching Method </h3>

  MATLAB functions are provided for computing distance functions, 
  extending field variables off of the zero level set, and solving the
  Eikonal equation using first-order accurate fast marching methods.  
  These functions are made available via MEX wrappers for the numerical 
  kernels in the @ref package_lsm_toolbox "Toolbox" package.   

  <center>
  <table>
  <tr align="center" valign="middle">
  <th>2D</th>
  <th>3D</th>
  </tr>
  <tr align="center" valign="middle">
  <td>computeDistanceFunction2d</td>
  <td>computeDistanceFunction3d</td>
  </tr>
  <tr align="center" valign="middle">
  <td>computeExtensionFields2d</td>
  <td>computeExtensionFields3d</td>
  </tr>
  <tr align="center" valign="middle">
  <td>solveEikonalEquation2d</td>
  <td>solveEikonalEquation3d</td>
  </tr>
  </table>
  </center>


*/

}
