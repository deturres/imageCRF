c***********************************************************************
c
c  File:        lsm_curvature3d.f
c  Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
c                   Regents of the University of Texas.  All rights reserved.
c               (c) 2009 Kevin T. Chu.  All rights reserved.
c  Revision:    $Revision: 156 $
c  Modified:    $Date: 2009-02-11 23:55:24 -0800 (Wed, 11 Feb 2009) $
c  Description: F77 routines for computing 3D curvature
c
c***********************************************************************


c***********************************************************************
      subroutine lsm3dComputeMeanCurvatureOrder2(
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,
     &  klo_kappa_gb, khi_kappa_gb,
     &  phi,
     &  ilo_phi_gb, ihi_phi_gb,
     &  jlo_phi_gb, jhi_phi_gb,     
     &  klo_phi_gb, khi_phi_gb,
     &  phi_x, phi_y, phi_z, grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  ilo_kappa_fb, ihi_kappa_fb,
     &  jlo_kappa_fb, jhi_kappa_fb,
     &  klo_kappa_fb, khi_kappa_fb,
     &  dx,dy,dz)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer klo_kappa_gb, khi_kappa_gb
      integer ilo_phi_gb, ihi_phi_gb
      integer jlo_phi_gb, jhi_phi_gb
      integer klo_phi_gb, khi_phi_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &           jlo_kappa_gb:jhi_kappa_gb,
     &           klo_kappa_gb:khi_kappa_gb)
      real phi(ilo_phi_gb:ihi_phi_gb,
     &         jlo_phi_gb:jhi_phi_gb,
     &         klo_phi_gb:khi_phi_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                  jlo_grad_phi_gb:jhi_grad_phi_gb,
     &                  klo_grad_phi_gb:khi_grad_phi_gb)
      real dx, dy, dz
      
      integer ilo_kappa_fb, ihi_kappa_fb
      integer jlo_kappa_fb, jhi_kappa_fb
      integer klo_kappa_fb, khi_kappa_fb
      
c     local variables      
      integer i,j,k
      real phi_xx, phi_xy, phi_yy
      real phi_xz, phi_yz, phi_zz
      real dxsq_factor, dysq_factor, dxdy_factor
      real dzsq_factor, dydz_factor, dxdz_factor
      real zero_tol, denominator, kappa_tmp
      parameter (zero_tol=@lsmlib_zero_tol@)
 
      dxsq_factor = 1.d0/dx/dx
      dysq_factor = 1.d0/dy/dy
      dzsq_factor = 1.d0/dz/dz
      dxdy_factor = 0.25d0/dx/dy
      dxdz_factor = 0.25d0/dx/dz
      dydz_factor = 0.25d0/dy/dz
      
c     { begin loop over grid
      do k=klo_kappa_fb,khi_kappa_fb
        do j=jlo_kappa_fb,jhi_kappa_fb
          do i=ilo_kappa_fb,ihi_kappa_fb

            phi_xx = ( phi(i+1,j,k) - 2.0d0*phi(i,j,k) 
     &               + phi(i-1,j,k) )*dxsq_factor
            phi_yy = ( phi(i,j+1,k) - 2.0d0*phi(i,j,k)
     &               + phi(i,j-1,k) )*dysq_factor
            phi_zz = ( phi(i,j,k+1) - 2.0d0*phi(i,j,k) 
     &               + phi(i,j,k-1) )*dzsq_factor 
            phi_xy = ( phi(i+1,j+1,k) - phi(i+1,j-1,k)
     &               -phi(i-1,j+1,k) + phi(i-1,j-1,k))*dxdy_factor     
            phi_xz = ( phi(i+1,j,k+1) - phi(i+1,j,k-1)
     &               -phi(i-1,j,k+1) + phi(i-1,j,k-1))*dxdz_factor
            phi_yz = ( phi(i,j+1,k+1) - phi(i,j+1,k-1)
     &               -phi(i,j-1,k+1) + phi(i,j-1,k-1))*dydz_factor

            denominator = grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)*
     &                    grad_phi_mag(i,j,k)       

            if( denominator .lt. zero_tol ) then
              kappa(i,j,k) = 0.d0
            else
              kappa_tmp = phi_xx*phi_y(i,j,k)*phi_y(i,j,k)  
     &                  +  phi_yy*phi_x(i,j,k)*phi_x(i,j,k)  
     &                  -2*phi_xy*phi_x(i,j,k)*phi_y(i,j,k)
     &                    +  phi_xx*phi_z(i,j,k)*phi_z(i,j,k)  
     &                    +  phi_zz*phi_x(i,j,k)*phi_x(i,j,k)  
     &                  -2*phi_xz*phi_x(i,j,k)*phi_z(i,j,k)
     &                    +  phi_yy*phi_z(i,j,k)*phi_z(i,j,k)  
     &                    +  phi_zz*phi_y(i,j,k)*phi_y(i,j,k)  
     &                  -2*phi_yz*phi_y(i,j,k)*phi_z(i,j,k)
     
              kappa(i,j,k) = kappa_tmp/denominator
            endif

         enddo
       enddo
      enddo
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************



c***********************************************************************

      subroutine lsm3dComputeGaussianCurvatureOrder2(
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,
     &  klo_kappa_gb, khi_kappa_gb,
     &  phi,
     &  ilo_phi_gb, ihi_phi_gb,
     &  jlo_phi_gb, jhi_phi_gb,     
     &  klo_phi_gb, khi_phi_gb,
     &  phi_x, phi_y, phi_z, grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  ilo_kappa_fb, ihi_kappa_fb, 
     &  jlo_kappa_fb, jhi_kappa_fb,
     &  klo_kappa_fb, khi_kappa_fb,
     &  dx, dy, dz)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer klo_kappa_gb, khi_kappa_gb
      integer ilo_phi_gb, ihi_phi_gb
      integer jlo_phi_gb, jhi_phi_gb
      integer klo_phi_gb, khi_phi_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &           jlo_kappa_gb:jhi_kappa_gb,
     &           klo_kappa_gb:khi_kappa_gb)
      real phi(ilo_phi_gb:ihi_phi_gb,
     &         jlo_phi_gb:jhi_phi_gb,
     &         klo_phi_gb:khi_phi_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                  jlo_grad_phi_gb:jhi_grad_phi_gb,
     &                  klo_grad_phi_gb:khi_grad_phi_gb)
      real dx, dy, dz
      
      integer ilo_kappa_fb, ihi_kappa_fb
      integer jlo_kappa_fb, jhi_kappa_fb
      integer klo_kappa_fb, khi_kappa_fb
      
c     local variables      
      integer i,j,k
      real phi_xx, phi_xy, phi_yy
      real phi_xz, phi_yz, phi_zz
      real dxsq_factor, dysq_factor, dxdy_factor
      real dzsq_factor, dydz_factor, dxdz_factor
      real zero_tol, denominator, kappa_tmp
      parameter (zero_tol=@lsmlib_zero_tol@)
 
      dxsq_factor = 1.d0/dx/dx
      dysq_factor = 1.d0/dy/dy
      dzsq_factor = 1.d0/dz/dz
      dxdy_factor = 0.25d0/dx/dy
      dxdz_factor = 0.25d0/dx/dz
      dydz_factor = 0.25d0/dy/dz

c     { begin loop over grid
      do k=klo_kappa_fb,khi_kappa_fb
        do j=jlo_kappa_fb,jhi_kappa_fb
          do i=ilo_kappa_fb,ihi_kappa_fb     

            phi_xx = ( phi(i+1,j,k) - 2.0d0*phi(i,j,k) 
     &             + phi(i-1,j,k) )*dxsq_factor
            phi_yy = ( phi(i,j+1,k) - 2.0d0*phi(i,j,k)
     &             + phi(i,j-1,k) )*dysq_factor
            phi_zz = ( phi(i,j,k+1) - 2.0d0*phi(i,j,k) 
     &             + phi(i,j,k-1) )*dzsq_factor 
            phi_xy = ( phi(i+1,j+1,k) - phi(i+1,j-1,k)
     &             -phi(i-1,j+1,k) + phi(i-1,j-1,k))*dxdy_factor     
            phi_xz = ( phi(i+1,j,k+1) - phi(i+1,j,k-1)
     &             -phi(i-1,j,k+1) + phi(i-1,j,k-1))*dxdz_factor
          phi_yz = ( phi(i,j+1,k+1) - phi(i,j+1,k-1)
     &             -phi(i,j-1,k+1) + phi(i,j-1,k-1))*dydz_factor

          denominator = grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)*
     &                  grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)       

          if ( denominator .lt. zero_tol ) then
            kappa(i,j,k) = 0.d0
          else
            kappa_tmp = 
     &      phi_x(i,j,k)*phi_x(i,j,k)*(phi_yy*phi_zz - phi_yz*phi_yz)
     & +    phi_y(i,j,k)*phi_y(i,j,k)*(phi_xx*phi_zz - phi_xz*phi_xz)
     & +    phi_z(i,j,k)*phi_z(i,j,k)*(phi_xx*phi_yy - phi_xy*phi_xy) 
     & + 2*(phi_x(i,j,k)*phi_y(i,j,k)*(phi_xz*phi_yz - phi_xy*phi_zz)
     &     +phi_y(i,j,k)*phi_z(i,j,k)*(phi_xy*phi_xz - phi_yz*phi_xx) 
     &     +phi_x(i,j,k)*phi_z(i,j,k)*(phi_xy*phi_yz - phi_xz*phi_yy))
     
            kappa(i,j,k) = kappa_tmp/denominator
          endif

          enddo
        enddo
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dComputeMeanCurvatureOrder4(
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,     
     &  klo_kappa_gb, khi_kappa_gb, 
     &  phi,
     &  ilo_phi_gb, ihi_phi_gb,
     &  jlo_phi_gb, jhi_phi_gb,    
     &  klo_phi_gb, khi_phi_gb,
     &  phi_x, phi_y, phi_z, grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb, 
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  ilo_fb, ihi_fb, 
     &  jlo_fb, jhi_fb,  
     &  klo_fb, khi_fb,     
     &  dx, dy, dz)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer klo_kappa_gb, khi_kappa_gb
      integer ilo_phi_gb, ihi_phi_gb
      integer jlo_phi_gb, jhi_phi_gb 
      integer klo_phi_gb, khi_phi_gb     
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &           jlo_kappa_gb:jhi_kappa_gb,
     &           klo_kappa_gb:khi_kappa_gb)
      real phi(ilo_phi_gb:ihi_phi_gb,
     &         jlo_phi_gb:jhi_phi_gb,
     &         klo_phi_gb:khi_phi_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                  jlo_grad_phi_gb:jhi_grad_phi_gb,
     &                  klo_grad_phi_gb:khi_grad_phi_gb)
      real dx, dy, dz
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      integer klo_fb, khi_fb
      
c     local variables      
      integer i,j,k
      real phi_xx, phi_xy, phi_yy
      real phi_zx, phi_yz, phi_zz
      real dxsq_factor, dysq_factor, dzsq_factor
      real dx_factor, dy_factor, dz_factor
      real zero_tol, kappa_tmp, denominator
      parameter (zero_tol=@lsmlib_zero_tol@)
      real sixteen, thirty, eight
      parameter (sixteen = 16.0d0, thirty=30.0d0)
      parameter (eight = 8.0d0)
 
c     compute denominator values
      dxsq_factor = 0.0833333333333333333333d0/dx/dx
      dysq_factor = 0.0833333333333333333333d0/dy/dy
      dzsq_factor = 0.0833333333333333333333d0/dz/dz
      dx_factor   = 0.0833333333333333333333d0/dx
      dy_factor   = 0.0833333333333333333333d0/dy
      dz_factor   = 0.0833333333333333333333d0/dz
      
c       { begin loop over grid
        do k=klo_fb,khi_fb
         do j=jlo_fb,jhi_fb
          do i=ilo_fb,ihi_fb  
       
            phi_xx = ( -phi(i+2,j,k) + sixteen*phi(i+1,j,k)
     &               -thirty*phi(i,j,k)
     &               -phi(i-2,j,k) + sixteen*phi(i-1,j,k) )
     &               * dxsq_factor
            phi_yy = ( -phi(i,j+2,k) + sixteen*phi(i,j+1,k)
     &               -thirty*phi(i,j,k) 
     &               -phi(i,j-2,k) + sixteen*phi(i,j-1,k) )
     &               * dysq_factor
            phi_zz = ( -phi(i,j,k+2) + sixteen*phi(i,j,k+1) 
     &               -thirty*phi(i,j,k)  
     &               -phi(i,j,k-2) + sixteen*phi(i,j,k-1) )
     &               * dzsq_factor
            phi_xy = ( -phi_x(i,j+2,k) + eight*phi_x(i,j+1,k) 
     &               +phi_x(i,j-2,k) - eight*phi_x(i,j-1,k) )
     &               * dy_factor
          phi_yz = ( -phi_y(i,j,k+2) + eight*phi_y(i,j,k+1) 
     &               +phi_y(i,j,k-2) - eight*phi_y(i,j,k-1) )
     &               * dz_factor
          phi_zx = ( -phi_z(i+2,j,k) + eight*phi_z(i+1,j,k) 
     &               +phi_z(i-2,j,k) - eight*phi_z(i-1,j,k) )
     &               * dx_factor

          denominator = grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)*
     &                  grad_phi_mag(i,j,k)       

          if( denominator .lt. zero_tol ) then
             kappa(i,j,k) = 0.d0
          else
             kappa_tmp =  phi_xx*phi_y(i,j,k)*phi_y(i,j,k)  
     &                 +  phi_yy*phi_x(i,j,k)*phi_x(i,j,k)  
     &                 -2*phi_xy*phi_x(i,j,k)*phi_y(i,j,k)
     &                 +  phi_xx*phi_z(i,j,k)*phi_z(i,j,k)  
     &                 +  phi_zz*phi_x(i,j,k)*phi_x(i,j,k)  
     &                 -2*phi_zx*phi_x(i,j,k)*phi_z(i,j,k)
     &                 +  phi_yy*phi_z(i,j,k)*phi_z(i,j,k)  
     &                 +  phi_zz*phi_y(i,j,k)*phi_y(i,j,k)  
     &                 -2*phi_yz*phi_y(i,j,k)*phi_z(i,j,k)
             kappa(i,j,k) = kappa_tmp/denominator
          endif
         enddo
       enddo
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************



c***********************************************************************

      subroutine lsm3dComputeGaussianCurvatureOrder4(
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,
     &  klo_kappa_gb, khi_kappa_gb,
     &  phi,
     &  ilo_phi_gb, ihi_phi_gb,
     &  jlo_phi_gb, jhi_phi_gb,     
     &  klo_phi_gb, khi_phi_gb,
     &  phi_x, phi_y, phi_z, grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  ilo_kappa_fb, ihi_kappa_fb, 
     &  jlo_kappa_fb, jhi_kappa_fb,
     &  klo_kappa_fb, khi_kappa_fb,
     &  dx,dy,dz)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer klo_kappa_gb, khi_kappa_gb
      integer ilo_phi_gb, ihi_phi_gb
      integer jlo_phi_gb, jhi_phi_gb
      integer klo_phi_gb, khi_phi_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &           jlo_kappa_gb:jhi_kappa_gb,
     &           klo_kappa_gb:khi_kappa_gb)
      real phi(ilo_phi_gb:ihi_phi_gb,
     &         jlo_phi_gb:jhi_phi_gb,
     &         klo_phi_gb:khi_phi_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                  jlo_grad_phi_gb:jhi_grad_phi_gb,
     &                  klo_grad_phi_gb:khi_grad_phi_gb)
      real dx, dy, dz
      
      integer ilo_kappa_fb, ihi_kappa_fb
      integer jlo_kappa_fb, jhi_kappa_fb
      integer klo_kappa_fb, khi_kappa_fb
            
c     local variables      
      integer i,j,k
      real phi_xx, phi_xy, phi_yy
      real phi_zx, phi_yz, phi_zz
      real dxsq_factor, dysq_factor, dzsq_factor
      real dx_factor, dy_factor, dz_factor
      real zero_tol, kappa_tmp, denominator
      parameter (zero_tol=@lsmlib_zero_tol@)
      real sixteen, thirty, eight
      parameter (sixteen = 16.0d0, thirty=30.0d0)
      parameter (eight = 8.0d0)
 
c     compute denominator values
      dxsq_factor = 0.0833333333333333333333d0/dx/dx
      dysq_factor = 0.0833333333333333333333d0/dy/dy
      dzsq_factor = 0.0833333333333333333333d0/dz/dz
      dx_factor   = 0.0833333333333333333333d0/dx
      dy_factor   = 0.0833333333333333333333d0/dy
      dz_factor   = 0.0833333333333333333333d0/dz
      
c       { begin loop over grid
        do k=klo_kappa_fb,khi_kappa_fb
         do j=jlo_kappa_fb,jhi_kappa_fb
          do i=ilo_kappa_fb,ihi_kappa_fb  
       
            phi_xx = ( -phi(i+2,j,k) + sixteen*phi(i+1,j,k)
     &               -thirty*phi(i,j,k)
     &               -phi(i-2,j,k) + sixteen*phi(i-1,j,k) )
     &               * dxsq_factor
            phi_yy = ( -phi(i,j+2,k) + sixteen*phi(i,j+1,k)
     &               -thirty*phi(i,j,k)
     &               -phi(i,j-2,k) + sixteen*phi(i,j-1,k) )
     &               * dysq_factor
            phi_zz = ( -phi(i,j,k+2) + sixteen*phi(i,j,k+1)
     &               -thirty*phi(i,j,k)
     &               -phi(i,j,k-2) + sixteen*phi(i,j,k-1) )
     &               * dzsq_factor
            phi_xy = ( -phi_x(i,j+2,k) + eight*phi_x(i,j+1,k) 
     &               +phi_x(i,j-2,k) - eight*phi_x(i,j-1,k) )
     &               * dy_factor
            phi_yz = ( -phi_y(i,j,k+2) + eight*phi_y(i,j,k+1) 
     &               +phi_y(i,j,k-2) - eight*phi_y(i,j,k-1) )
     &               * dz_factor
            phi_zx = ( -phi_z(i+2,j,k) + eight*phi_z(i+1,j,k) 
     &               +phi_z(i-2,j,k) - eight*phi_z(i-1,j,k) )
     &               * dx_factor

          denominator = grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)*
     &                  grad_phi_mag(i,j,k)*grad_phi_mag(i,j,k)

          if( denominator .lt. zero_tol ) then
            kappa(i,j,k) = 0.d0
          else
            kappa_tmp = 
     &      phi_x(i,j,k)*phi_x(i,j,k)*(phi_yy*phi_zz - phi_yz*phi_yz)
     & +    phi_y(i,j,k)*phi_y(i,j,k)*(phi_xx*phi_zz - phi_zx*phi_zx)
     & +    phi_z(i,j,k)*phi_z(i,j,k)*(phi_xx*phi_yy - phi_xy*phi_xy) 
     & + 2*(phi_x(i,j,k)*phi_y(i,j,k)*(phi_zx*phi_yz - phi_xy*phi_zz)
     &    + phi_y(i,j,k)*phi_z(i,j,k)*(phi_xy*phi_zx - phi_yz*phi_xx) 
     &    + phi_x(i,j,k)*phi_z(i,j,k)*(phi_xy*phi_yz - phi_zx*phi_yy))
     
            kappa(i,j,k) = kappa_tmp/denominator
          endif
         enddo
       enddo
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************

