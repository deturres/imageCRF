c***********************************************************************
c
c  File:        lsm_level_set_evolution2d.f
c  Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
c                   Regents of the University of Texas.  All rights reserved.
c               (c) 2009 Kevin T. Chu.  All rights reserved.
c  Revision:    $Revision: 149 $
c  Modified:    $Date: 2009-01-18 00:31:09 -0800 (Sun, 18 Jan 2009) $
c  Description: F77 subroutines for 2D level set evolution equation
c
c***********************************************************************



c***********************************************************************
      subroutine lsm2dZeroOutLevelSetEqnRHS(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb)
      integer i,j

c     { begin loop over grid
      do j=jlo_lse_rhs_gb,jhi_lse_rhs_gb
        do i=ilo_lse_rhs_gb,ihi_lse_rhs_gb
        
          lse_rhs(i,j) = 0.d0
      
        enddo 
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm2dAddAdvectionTermToLSERHS(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  phi_x, phi_y,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  vel_x, vel_y,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  ilo_fb, ihi_fb,
     &  jlo_fb, jhi_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer ilo_fb, ihi_fb
      integer jlo_fb, jhi_fb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real vel_x(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      real vel_y(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      integer i,j

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb
        
          lse_rhs(i,j) = lse_rhs(i,j) - ( vel_x(i,j)*phi_x(i,j)
     &                                  + vel_y(i,j)*phi_y(i,j) )
      
        enddo 
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm2dAddNormalVelTermToLSERHS(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  phi_x_plus, phi_y_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  vel_n,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  ilo_fb, ihi_fb,
     &  jlo_fb, jhi_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer ilo_fb, ihi_fb
      integer jlo_fb, jhi_fb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      integer i,j
      real vel_n_cur
      real norm_grad_phi_sq
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb

          vel_n_cur = vel_n(i,j)
          if (abs(vel_n_cur) .ge. zero_tol) then

c           { begin Godunov selection of grad_phi

            if (vel_n_cur .gt. 0.d0) then
              norm_grad_phi_sq = max(max(phi_x_minus(i,j),0.d0)**2,
     &                               min(phi_x_plus(i,j),0.d0)**2 )
     &                         + max(max(phi_y_minus(i,j),0.d0)**2,
     &                               min(phi_y_plus(i,j),0.d0)**2 )
            else
              norm_grad_phi_sq = max(min(phi_x_minus(i,j),0.d0)**2,
     &                               max(phi_x_plus(i,j),0.d0)**2 )
     &                         + max(min(phi_y_minus(i,j),0.d0)**2,
     &                               max(phi_y_plus(i,j),0.d0)**2 )
            endif

c           } end Godunov selection of grad_phi


c           compute contribution to lse_rhs(i,j) 
            lse_rhs(i,j) = lse_rhs(i,j) 
     &                   - vel_n_cur*sqrt(norm_grad_phi_sq)

          endif
     
        enddo 
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm2dAddConstNormalVelTermToLSERHS(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  phi_x_plus, phi_y_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  vel_n,
     &  ilo_fb, ihi_fb,
     &  jlo_fb, jhi_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer ilo_fb, ihi_fb
      integer jlo_fb, jhi_fb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real vel_n
      
      integer i,j
      real norm_grad_phi_sq
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

      if (abs(vel_n) .ge. zero_tol) then

c       { begin loop over grid
        do j=jlo_fb,jhi_fb
          do i=ilo_fb,ihi_fb


c           { begin Godunov selection of grad_phi

            if (vel_n .gt. 0.d0) then
              norm_grad_phi_sq = max(max(phi_x_minus(i,j),0.d0)**2,
     &                               min(phi_x_plus(i,j),0.d0)**2 )
     &                         + max(max(phi_y_minus(i,j),0.d0)**2,
     &                               min(phi_y_plus(i,j),0.d0)**2 )
            else
              norm_grad_phi_sq = max(min(phi_x_minus(i,j),0.d0)**2,
     &                               max(phi_x_plus(i,j),0.d0)**2 )
     &                         + max(min(phi_y_minus(i,j),0.d0)**2,
     &                               max(phi_y_plus(i,j),0.d0)**2 )
            endif

c           } end Godunov selection of grad_phi


c           compute contribution to lse_rhs(i,j) 
              lse_rhs(i,j) = lse_rhs(i,j) 
     &                     - vel_n*sqrt(norm_grad_phi_sq)

          enddo 
        enddo 
c       } end loop over grid

      endif
     

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm2dAddConstCurvTermToLSERHS(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  phi_x, phi_y,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  phi_xx, phi_xy, phi_yy,
     &  ilo_grad2_phi_gb, ihi_grad2_phi_gb,
     &  jlo_grad2_phi_gb, jhi_grad2_phi_gb,
     &  b,
     &  ilo_fb, ihi_fb,
     &  jlo_fb, jhi_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer ilo_grad2_phi_gb, ihi_grad2_phi_gb
      integer jlo_grad2_phi_gb, jhi_grad2_phi_gb
      integer ilo_fb, ihi_fb
      integer jlo_fb, jhi_fb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real phi_xx(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb)
      real phi_yy(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb)
      real phi_xy(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb)
      real b
      
      integer i,j
      real grad_mag2, curv
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb
	
c         compute squared magnitude of gradient
	  grad_mag2 = phi_x(i,j) * phi_x(i,j) + phi_y(i,j) * phi_y(i,j) 

	  if(grad_mag2 .lt. zero_tol) then
	      curv = 0.d0
	  else
	    curv = phi_xx(i,j)*phi_y(i,j)*phi_y(i,j)  
     &	       +   phi_yy(i,j)*phi_x(i,j)*phi_x(i,j)  
     &	       - 2*phi_xy(i,j)*phi_x(i,j)*phi_y(i,j)  
	    curv = curv / grad_mag2 
	  endif

	  lse_rhs(i,j) = lse_rhs(i,j) + b*curv
      
        enddo 
      enddo 
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
      subroutine lsm2dAddConstPrecomputedCurvTermToLSERHS(
     &  lse_rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,
     &  grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  b,
     &  ilo_rhs_fb, ihi_rhs_fb, 
     &  jlo_rhs_fb, jhi_rhs_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &           jlo_kappa_gb:jhi_kappa_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                  jlo_grad_phi_gb:jhi_grad_phi_gb)
      real lse_rhs(ilo_rhs_gb:ihi_rhs_gb,
     &             jlo_rhs_gb:jhi_rhs_gb)   
     
      integer ilo_rhs_fb, ihi_rhs_fb
      integer jlo_rhs_fb, jhi_rhs_fb
      
      real b
c     local variables      
      integer i,j
         
c     { begin loop over fillbox points
        do j =  jlo_rhs_fb,jhi_rhs_gb
          do i = ilo_rhs_gb, ihi_rhs_gb
            lse_rhs(i,j)=lse_rhs(i,j) + 
     &	                  b*kappa(i,j)*grad_phi_mag(i,j)
	  enddo
        enddo  
c     } end loop over fillbox points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************

      subroutine lsm2dAddExternalAndNormalVelTermToLSERHS(
     &  lse_rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  phi_x_plus, phi_y_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  vel_n,
     &  vel_x, vel_y,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  ilo_rhs_fb, ihi_rhs_fb,
     &  jlo_rhs_fb, jhi_rhs_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      real lse_rhs(ilo_rhs_gb:ihi_rhs_gb,
     &             jlo_rhs_gb:jhi_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb)
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      real vel_x(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      real vel_y(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb)
      integer ilo_rhs_fb, ihi_rhs_fb
      integer jlo_rhs_fb, jhi_rhs_fb
      
c     local variables      
      integer i,j,l
      real    vel_n_cur, vel_x_cur, vel_y_cur
      real    H1_x_minus, H1_x_plus, phi_x
      real    H1_y_minus, H1_y_plus, phi_y
      real    norm_grad_phi_sq
      real    zero_tol, zero 
      parameter (zero_tol=@lsmlib_zero_tol@, zero=0.d0)

c     { begin loop over indexed points
      do j=jlo_rhs_fb,jhi_rhs_fb
       do i=ilo_rhs_fb,ihi_rhs_fb
       
           vel_n_cur = vel_n(i,j)
	   vel_x_cur = vel_x(i,j)
	   vel_y_cur = vel_y(i,j)
	   
c         { begin Godunov selection of phi_x
           H1_x_plus =  vel_x_cur + vel_n_cur*phi_x_plus(i,j)
	   H1_x_minus = vel_x_cur + vel_n_cur*phi_x_minus(i,j)
	  
          if( H1_x_plus .gt. zero) then
	      if(H1_x_minus .gt. zero ) then
	        phi_x = phi_x_minus(i,j);
	      else
	        phi_x = - vel_x_cur / vel_n_cur
              endif
	  else
	      if(H1_x_minus .lt. zero ) then
	        phi_x = phi_x_plus(i,j);
	      else  
                if( abs(H1_x_plus) .gt. abs(H1_x_minus) ) then
	           phi_x = phi_x_plus(i,j)
	        else
	           phi_x = phi_x_minus(i,j)
	        endif
	      endif
	  endif

c         { begin Godunov selection of phi_y
          H1_y_plus =  vel_y_cur + vel_n_cur*phi_y_plus(i,j)
	  H1_y_minus = vel_y_cur + vel_n_cur*phi_y_minus(i,j)
	  
          if( H1_y_plus .gt. zero) then
	      if(H1_y_minus .gt. zero ) then
	        phi_y = phi_y_minus(i,j);
	      else
	        phi_y = - vel_y_cur / vel_n_cur
              endif
	  else
	      if(H1_y_minus .lt. zero ) then
	        phi_y = phi_y_plus(i,j);
	      else  
                if( abs(H1_y_plus) .gt. abs(H1_y_minus) ) then
	           phi_y = phi_y_plus(i,j)
	        else
	           phi_y = phi_y_minus(i,j)
	        endif
	      endif
	  endif   
	  norm_grad_phi_sq = phi_x*phi_x + phi_y*phi_y      
          

c         compute contribution to lse_rhs(i,j) 
          if (abs(vel_n_cur) .ge. zero_tol) then
            lse_rhs(i,j) = lse_rhs(i,j) 
     &	                  - vel_x_cur*phi_x - vel_y_cur*phi_y
     &                    - vel_n_cur*sqrt(norm_grad_phi_sq)
          endif
     
        enddo
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************
