c***********************************************************************
c
c  File:        lsm_level_set_evolution3d_local.f
c  Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
c                   Regents of the University of Texas.  All rights reserved.
c               (c) 2009 Kevin T. Chu.  All rights reserved.
c  Revision:    $Revision: 149 $
c  Modified:    $Date: 2009-01-18 00:31:09 -0800 (Sun, 18 Jan 2009) $
c  Description: F77 subroutines for 3D, narrow-band level set 
c               evolution equation
c
c***********************************************************************


c***********************************************************************
      subroutine lsm3dZeroOutLevelSetEqnRHSLOCAL(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  klo_lse_rhs_gb, khi_lse_rhs_gb,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer klo_lse_rhs_gb, khi_lse_rhs_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb,
     &             klo_lse_rhs_gb:khi_lse_rhs_gb)
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)

c     local variables      
      integer i,j,k,l

c     { begin loop over indexed points
      do l=nlo_index, nhi_index      
        i=index_x(l)
	j=index_y(l)
	k=index_z(l)      
	
	lse_rhs(i,j,k) = 0.d0
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dAddAdvectionTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  klo_lse_rhs_gb, khi_lse_rhs_gb,
     &  phi_x, phi_y, phi_z,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  vel_x, vel_y, vel_z,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer klo_lse_rhs_gb, khi_lse_rhs_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb,
     &             klo_lse_rhs_gb:khi_lse_rhs_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real vel_x(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_y(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_z(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb 
      integer i,j,k,l

c     { begin loop over indexed points
      do l=nlo_index, nhi_index      
        i=index_x(l)
	j=index_y(l)
	k=index_z(l)   

        if( narrow_band(i,j,k) .le. mark_fb ) then	        
            lse_rhs(i,j,k) = lse_rhs(i,j,k) 
     &                     - ( vel_x(i,j,k)*phi_x(i,j,k)
     &                       + vel_y(i,j,k)*phi_y(i,j,k) 
     &                       + vel_z(i,j,k)*phi_z(i,j,k) )
      
        endif
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dAddNormalVelTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  klo_lse_rhs_gb, khi_lse_rhs_gb,
     &  phi_x_plus, phi_y_plus, phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  vel_n,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer klo_lse_rhs_gb, khi_lse_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb,
     &             klo_lse_rhs_gb:khi_lse_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_z_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb 
      integer i,j,k,l
      real vel_n_cur
      real norm_grad_phi_sq
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

c     { begin loop over indexed points
      do l=nlo_index, nhi_index      
        i=index_x(l)
	j=index_y(l)
	k=index_z(l)
	
        if( narrow_band(i,j,k) .le. mark_fb ) then	
            vel_n_cur = vel_n(i,j,k)

c           { begin Godunov selection of grad_phi

            if (vel_n_cur .gt. 0.d0) then
              norm_grad_phi_sq = max(max(phi_x_minus(i,j,k),0.d0)**2,
     &                               min(phi_x_plus(i,j,k),0.d0)**2 )
     &                         + max(max(phi_y_minus(i,j,k),0.d0)**2,
     &                               min(phi_y_plus(i,j,k),0.d0)**2 )
     &                         + max(max(phi_z_minus(i,j,k),0.d0)**2,
     &                               min(phi_z_plus(i,j,k),0.d0)**2 )
            else
              norm_grad_phi_sq = max(min(phi_x_minus(i,j,k),0.d0)**2,
     &                               max(phi_x_plus(i,j,k),0.d0)**2 )
     &                         + max(min(phi_y_minus(i,j,k),0.d0)**2,
     &                               max(phi_y_plus(i,j,k),0.d0)**2 )
     &                         + max(min(phi_z_minus(i,j,k),0.d0)**2,
     &                               max(phi_z_plus(i,j,k),0.d0)**2 )
            endif

c           } end Godunov selection of grad_phi


c           compute contribution to lse_rhs(i,j,k) 
            if (abs(vel_n_cur) .ge. zero_tol) then
              lse_rhs(i,j,k) = lse_rhs(i,j,k) 
     &                       - vel_n_cur*sqrt(norm_grad_phi_sq)
            endif
      
        endif
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dAddConstNormalVelTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  klo_lse_rhs_gb, khi_lse_rhs_gb,
     &  phi_x_plus, phi_y_plus, phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  vel_n,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,  
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer klo_lse_rhs_gb, khi_lse_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb,
     &             klo_lse_rhs_gb:khi_lse_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_z_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real vel_n
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb 
      integer i,j,k,l
      real norm_grad_phi_sq
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

c     { begin loop over indexed points
        do l=nlo_index, nhi_index      
        i=index_x(l)
	j=index_y(l)
	k=index_z(l)
	
c       { begin Godunov selection of grad_phi

       if( narrow_band(i,j,k) .le. mark_fb ) then	
     
        if (vel_n .gt. 0.d0) then
          norm_grad_phi_sq = max(max(phi_x_minus(i,j,k),0.d0)**2,
     &                           min(phi_x_plus(i,j,k),0.d0)**2 )
     &                     + max(max(phi_y_minus(i,j,k),0.d0)**2,
     &                           min(phi_y_plus(i,j,k),0.d0)**2 )
     &                     + max(max(phi_z_minus(i,j,k),0.d0)**2,
     &                           min(phi_z_plus(i,j,k),0.d0)**2 )
        else
          norm_grad_phi_sq = max(min(phi_x_minus(i,j,k),0.d0)**2,
     &                           max(phi_x_plus(i,j,k),0.d0)**2 )
     &                     + max(min(phi_y_minus(i,j,k),0.d0)**2,
     &                           max(phi_y_plus(i,j,k),0.d0)**2 )
     &                     + max(min(phi_z_minus(i,j,k),0.d0)**2,
     &                           max(phi_z_plus(i,j,k),0.d0)**2 )
        endif

c       } end Godunov selection of grad_phi


c       compute contribution to lse_rhs(i,j,k) 
        if (abs(vel_n) .ge. zero_tol) then
          lse_rhs(i,j,k) = lse_rhs(i,j,k) 
     &                   - vel_n*sqrt(norm_grad_phi_sq)
        endif
	
	endif
      enddo 
c     } end loop over indexed points
	
      return
      end
c } end subroutine
c***********************************************************************




c***********************************************************************
      subroutine lsm3dAddConstCurvTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_lse_rhs_gb, ihi_lse_rhs_gb,
     &  jlo_lse_rhs_gb, jhi_lse_rhs_gb,
     &  klo_lse_rhs_gb, khi_lse_rhs_gb,
     &  phi_x, phi_y, phi_z,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  phi_xx, phi_xy, phi_xz,
     &  phi_yy, phi_yz, phi_zz,
     &  ilo_grad2_phi_gb, ihi_grad2_phi_gb,
     &  jlo_grad2_phi_gb, jhi_grad2_phi_gb,
     &  klo_grad2_phi_gb, khi_grad2_phi_gb,
     &  b,
     &  index_x,
     &  index_y, 
     &  index_z,
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_lse_rhs_gb, ihi_lse_rhs_gb
      integer jlo_lse_rhs_gb, jhi_lse_rhs_gb
      integer klo_lse_rhs_gb, khi_lse_rhs_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      integer ilo_grad2_phi_gb, ihi_grad2_phi_gb
      integer jlo_grad2_phi_gb, jhi_grad2_phi_gb
      integer klo_grad2_phi_gb, khi_grad2_phi_gb
      real lse_rhs(ilo_lse_rhs_gb:ihi_lse_rhs_gb,
     &             jlo_lse_rhs_gb:jhi_lse_rhs_gb,
     &             klo_lse_rhs_gb:khi_lse_rhs_gb)
      real phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_z(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb,
     &           klo_grad_phi_gb:khi_grad_phi_gb)
      real phi_xx(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real phi_yy(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real phi_xy(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real phi_xz(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real phi_yz(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real phi_zz(ilo_grad2_phi_gb:ihi_grad2_phi_gb,
     &            jlo_grad2_phi_gb:jhi_grad2_phi_gb,
     &            klo_grad2_phi_gb:khi_grad2_phi_gb)
      real b
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb 
c     local variables      
      integer i,j,k,l
      real grad_mag2, curv
      real zero_tol
      parameter (zero_tol=@lsmlib_zero_tol@)

c     { begin loop over indexed points
      do l= nlo_index, nhi_index      
        i=index_x(l)
	j=index_y(l)
	k=index_z(l)
	
       if( narrow_band(i,j,k) .le. mark_fb ) then	
     
c           compute squared magnitude of gradient
	    grad_mag2 = phi_x(i,j,k) * phi_x(i,j,k) + 
     &	                phi_y(i,j,k) * phi_y(i,j,k) +
     &                  phi_z(i,j,k) * phi_z(i,j,k)
	    if(grad_mag2 .lt. zero_tol) then
	      curv = 0.d0
	    else
	      curv = phi_xx(i,j,k)*phi_y(i,j,k)*phi_y(i,j,k)  
     &	         +   phi_yy(i,j,k)*phi_x(i,j,k)*phi_x(i,j,k)  
     &	         - 2*phi_xy(i,j,k)*phi_x(i,j,k)*phi_y(i,j,k)
     &           +   phi_xx(i,j,k)*phi_z(i,j,k)*phi_z(i,j,k)  
     &	         +   phi_zz(i,j,k)*phi_x(i,j,k)*phi_x(i,j,k)  
     &	         - 2*phi_xz(i,j,k)*phi_x(i,j,k)*phi_z(i,j,k)
     &           +   phi_yy(i,j,k)*phi_z(i,j,k)*phi_z(i,j,k)  
     &	         +   phi_zz(i,j,k)*phi_y(i,j,k)*phi_y(i,j,k)  
     &	         - 2*phi_yz(i,j,k)*phi_y(i,j,k)*phi_z(i,j,k)
	      curv = curv / grad_mag2 
	      endif

	      lse_rhs(i,j,k) = lse_rhs(i,j,k) + b*curv
	      
	endif      
      enddo
c     } end loop over grid 

      return
      end
c } end subroutine
c***********************************************************************



c***********************************************************************
      subroutine lsm3dAddConstPrecomputedCurvTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  klo_rhs_gb, khi_rhs_gb,
     &  kappa,
     &  ilo_kappa_gb, ihi_kappa_gb,
     &  jlo_kappa_gb, jhi_kappa_gb,
     &  klo_kappa_gb, khi_kappa_gb,
     &  grad_phi_mag,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb,
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  klo_grad_phi_gb, khi_grad_phi_gb,
     &  b,
     &  index_x,
     &  index_y,
     &  index_z,
     &  nlo_index, nhi_index, 
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb, 
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_kappa_gb, ihi_kappa_gb
      integer jlo_kappa_gb, jhi_kappa_gb
      integer klo_kappa_gb, khi_kappa_gb
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer klo_grad_phi_gb, khi_grad_phi_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer klo_rhs_gb, khi_rhs_gb
      real kappa(ilo_kappa_gb:ihi_kappa_gb,
     &                       jlo_kappa_gb:jhi_kappa_gb,
     &                       klo_kappa_gb:khi_kappa_gb)
      real grad_phi_mag(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                              jlo_grad_phi_gb:jhi_grad_phi_gb,
     &                              klo_grad_phi_gb:khi_grad_phi_gb)
      real lse_rhs(ilo_rhs_gb:ihi_rhs_gb,
     &                         jlo_rhs_gb:jhi_rhs_gb,
     &                         klo_rhs_gb:khi_rhs_gb)   
     
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb
      
      real b
c     local variables      
      integer i,j,k,l
         
c     { begin loop over indexed points
      do l=nlo_index, nhi_index      
        i = index_x(l)
	j = index_y(l)
	k = index_z(l)
c       include only fill box points (marked appropriately)
        if( narrow_band(i,j,k) .le. mark_fb ) then
           lse_rhs(i,j,k)=lse_rhs(i,j,k) + 
     &	                  b*kappa(i,j,k)*grad_phi_mag(i,j,k)
	endif
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dAddExternalAndNormalVelTermToLSERHSLOCAL(
     &  lse_rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  klo_rhs_gb, khi_rhs_gb,
     &  phi_x_plus, phi_y_plus, phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  vel_n,
     &  vel_x, vel_y, vel_z,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  index_x,
     &  index_y,  
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb, 
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer klo_rhs_gb, khi_rhs_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      real lse_rhs(ilo_rhs_gb:ihi_rhs_gb,
     &             jlo_rhs_gb:jhi_rhs_gb,
     &             klo_rhs_gb:khi_rhs_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_z_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_x(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_y(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_z(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
     
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb
      
c     local variables      
      integer i,j,k,l
      real    vel_n_cur, vel_x_cur, vel_y_cur, vel_z_cur
      real    H1_x_minus, H1_x_plus, phi_x
      real    H1_y_minus, H1_y_plus, phi_y
      real    H1_z_minus, H1_z_plus, phi_z
      real    norm_grad_phi_sq
      real    zero_tol, zero 
      parameter (zero_tol=@lsmlib_zero_tol@, zero=0.d0)

c     { begin loop over indexed points
      do l=nlo_index, nhi_index      
         i=index_x(l)
	 j=index_y(l)
         k=index_z(l)
	 
         if( narrow_band(i,j,k) .le. mark_fb ) then
           vel_n_cur = vel_n(i,j,k)
	   vel_x_cur = vel_x(i,j,k)
	   vel_y_cur = vel_y(i,j,k) 
	   vel_z_cur = vel_z(i,j,k)
	   
c         { begin Godunov selection of phi_x
           H1_x_plus =  vel_x_cur + vel_n_cur*phi_x_plus(i,j,k)
	   H1_x_minus = vel_x_cur + vel_n_cur*phi_x_minus(i,j,k)
	   
          if( H1_x_plus .gt. zero) then
	      if(H1_x_minus .gt. zero ) then
	        phi_x = phi_x_minus(i,j,k);
	      else
	        phi_x = - vel_x_cur / vel_n_cur
              endif
	  else
	      if(H1_x_minus .lt. zero ) then
	        phi_x = phi_x_plus(i,j,k);
	      else  
                if( abs(H1_x_plus) .gt. abs(H1_x_minus) ) then
	           phi_x = phi_x_plus(i,j,k)
	        else
	           phi_x = phi_x_minus(i,j,k)
	        endif
	      endif
	  endif

c         { begin Godunov selection of phi_y
          H1_y_plus =  vel_y_cur + vel_n_cur*phi_y_plus(i,j,k)
	  H1_y_minus = vel_y_cur + vel_n_cur*phi_y_minus(i,j,k)
	  
          if( H1_y_plus .gt. zero) then
	      if(H1_y_minus .gt. zero ) then
	        phi_y = phi_y_minus(i,j,k);
	      else
	        phi_y = - (vel_y_cur / vel_n_cur)
              endif
	  else
	      if(H1_y_minus .lt. zero ) then
	        phi_y = phi_y_plus(i,j,k);
	      else  
                if( abs(H1_y_plus) .gt. abs(H1_y_minus) ) then
	           phi_y = phi_y_plus(i,j,k)
	        else
	           phi_y = phi_y_minus(i,j,k)
	        endif
	      endif
	  endif

c         { begin Godunov selection of phi_z
          H1_z_plus =  vel_z_cur + vel_n_cur*phi_z_plus(i,j,k)
	  H1_z_minus = vel_z_cur + vel_n_cur*phi_z_minus(i,j,k)
	  
          if( H1_z_plus .gt. zero) then
	      if(H1_z_minus .gt. zero ) then
	        phi_z = phi_z_minus(i,j,k);
	      else
	        phi_z = - (vel_z_cur / vel_n_cur)
              endif
	  else
	      if(H1_z_minus .lt. zero ) then
	        phi_z = phi_z_plus(i,j,k);
	      else  
                if( abs(H1_z_plus) .gt. abs(H1_z_minus) ) then
	           phi_z = phi_z_plus(i,j,k)
	        else
	           phi_z = phi_z_minus(i,j,k)
	        endif
	      endif
	  endif  

	  norm_grad_phi_sq = phi_x*phi_x + phi_y*phi_y +
     &	                     phi_z*phi_z       
          

c         compute contribution to lse_rhs(i,j,k) 
          if ((abs(vel_n_cur) .ge. zero_tol) .and.
     &	      (norm_grad_phi_sq .ge. zero_tol) ) then
            lse_rhs(i,j,k) = lse_rhs(i,j,k) 
     &	                  - vel_x_cur*phi_x - vel_y_cur*phi_y
     &                    - vel_z_cur*phi_z 
     &                    - vel_n_cur*sqrt(norm_grad_phi_sq)
          else
	    lse_rhs(i,j,k) = lse_rhs(i,j,k) 
     &	                  - vel_x_cur*phi_x - vel_y_cur*phi_y
     &                    - vel_z_cur*phi_z 
          endif
     
        endif 
      enddo 
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************
