c***********************************************************************
c
c  File:        lsm_calculus_toolbox2d.f
c  Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
c                   Regents of the University of Texas.  All rights reserved.
c               (c) 2009 Kevin T. Chu.  All rights reserved.
c  Revision:    $Revision: 149 $
c  Modified:    $Date: 2009-01-18 00:31:09 -0800 (Sun, 18 Jan 2009) $
c  Description: F77 routines for several common level set method
c               calculus calculations
c
c***********************************************************************


c***********************************************************************
      subroutine lsm2dDeltaFunctionOrder1(
     &  phi, delta,
     &  ilo_gb, ihi_gb, jlo_gb, jhi_gb,
     &  norm_phi_x, norm_phi_y,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb, 
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dx, dy)
c***********************************************************************
c { begin subroutine
      implicit none

c     _grad_phi_gb refers to ghostbox for grad_phi data
c     _gb refers to ghostbox for phi/delta arrays
c     _fb refers to fill-box for grad_phi data
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      integer ilo_gb, ihi_gb, jlo_gb, jhi_gb
      real norm_phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real norm_phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &           jlo_grad_phi_gb:jhi_grad_phi_gb)
      real phi(ilo_gb:ihi_gb,jlo_gb:jhi_gb)
      real delta(ilo_gb:ihi_gb,jlo_gb:jhi_gb)
     
      real dx,dy

c     local vars      
      real zero_tol, zero
      parameter (zero_tol=@lsmlib_zero_tol@, zero = 0.d0)
      integer i,j,l
      real delta_x_plus, delta_x_minus
      real delta_y_plus, delta_y_minus
      real one_over_dx, one_over_dy
      
      one_over_dx = 1.d0/dx;
      one_over_dy = 1.d0/dy;
      
c     { begin loop over grid 
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb
         	
	  if (phi(i+1,j)*phi(i,j) .le. zero ) then
	    delta_x_plus = phi(i+1,j)*norm_phi_x(i,j)*one_over_dx;
	    delta_x_plus = delta_x_plus/(phi(i+1,j) - phi(i,j)); 
	  else
	    delta_x_plus = zero;
	  endif

          if (phi(i-1,j)*phi(i,j) .le. zero ) then
	    delta_x_minus = phi(i-1,j)*norm_phi_x(i,j)*one_over_dx;
	    delta_x_minus = delta_x_minus/(phi(i-1,j) - phi(i,j)); 
	  else
	    delta_x_minus = zero;
	  endif
	  
	  if (phi(i,j+1)*phi(i,j) .le. zero ) then
	    delta_y_plus = phi(i,j+1)*norm_phi_y(i,j)*one_over_dy;
	    delta_y_plus = delta_y_plus/(phi(i,j+1) - phi(i,j)); 
	  else
	     delta_y_plus = zero;
	  endif

          if (phi(i,j-1)*phi(i,j) .le. zero ) then
	    delta_y_minus = phi(i,j-1)*norm_phi_y(i,j)*one_over_dy;
	    delta_y_minus = delta_y_minus/(phi(i,j-1) - phi(i,j)); 
	  else
	    delta_y_minus = zero;
	  endif
	             
	  delta(i,j) = ( abs(delta_x_plus) + abs(delta_x_minus) +
     &                   abs(delta_y_plus) + abs(delta_y_minus) )
	     
        enddo
      enddo
c     } end loop over grid 

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
      subroutine lsm2dDeltaFunctionOrder2(
     &  phi, delta,
     &  ilo_gb, ihi_gb, jlo_gb, jhi_gb,
     &  norm_phi_x, norm_phi_y,
     &  ilo_grad_phi_gb, ihi_grad_phi_gb, 
     &  jlo_grad_phi_gb, jhi_grad_phi_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dx, dy)
c***********************************************************************
c { begin subroutine
      implicit none

c     _grad_phi_gb refers to ghostbox for grad_phi data
c     _gb refers to ghostbox for phi/delta arrays
c     _fb refers to fill-box for grad_phi data
      integer ilo_grad_phi_gb, ihi_grad_phi_gb
      integer jlo_grad_phi_gb, jhi_grad_phi_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      integer ilo_gb, ihi_gb, jlo_gb, jhi_gb
      real norm_phi_x(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                jlo_grad_phi_gb:jhi_grad_phi_gb)
      real norm_phi_y(ilo_grad_phi_gb:ihi_grad_phi_gb,
     &                jlo_grad_phi_gb:jhi_grad_phi_gb)
      real phi(ilo_gb:ihi_gb,jlo_gb:jhi_gb)
      real delta(ilo_gb:ihi_gb,jlo_gb:jhi_gb)
      
      real dx,dy

c     local vars      
      real       zero_tol, zero, one
      parameter (zero_tol=@lsmlib_zero_tol@, zero = 0.d0, one = 1.d0)
      integer    i,j
      
      real one_over_2dx, one_over_2dy
      real one_over_dx, one_over_dy
      real one_over_dxsq, one_over_dysq
      real one_over_2dxsq, one_over_2dysq
      real half_dx, half_dy, dxsq, dysq
      real one_sixteenth
      
      real sx, sy, dxsx, dxsy, dysx, dysy
      real nx, ny
      real D, tmpx, tmpy
      real pc, dpc, d2pc, pi, pi1, pi2
      real sum1, sum2, diff
      real jump_gxx_x, jump_gyy_y
      real hx_plus, hy_plus, hx_minus, hy_minus, root
      real delta_x_plus, delta_x_minus
      real delta_y_plus, delta_y_minus
      
      half_dx = 0.5d0*dx;        half_dy = 0.5d0*dy;      
      one_over_dx =  one/dx;     one_over_dy =  one/dy; 
      one_over_2dx = 0.5d0/dx;   one_over_2dy = 0.5d0/dy;
      one_over_dxsq = one/dx/dx;
      one_over_dysq = one/dy/dy;
      one_over_2dxsq = 0.5d0/dx/dx;
      one_over_2dysq = 0.5d0/dy/dy;
      one_sixteenth = one/16.d0;
      
c     { begin loop over grid 
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb
         	
	 delta_y_minus = zero;

c         normal	  
	  nx = norm_phi_x(i,j);  ny = norm_phi_y(i,j);
c         tangent	  
	  sx = -ny;              sy = nx;	  	  

c         gradient of tangent (sx,sy)
	  dxsx = one_over_2dx*(-norm_phi_y(i+1,j) + norm_phi_y(i-1,j));
	  dysx = one_over_2dy*(-norm_phi_y(i,j+1) + norm_phi_y(i,j-1));
	  
	  dxsy = one_over_2dx*( norm_phi_x(i+1,j) - norm_phi_x(i-1,j));
	  dysy = one_over_2dy*( norm_phi_x(i,j+1) - norm_phi_x(i,j-1));

c         gradient of (sx,sy) in direction of (sx,sy)	 
	  tmpx = dxsx*sx + dysx*sy;
	  tmpy = dxsy*sx + dysy*sy;
	  	
c         formula (46), not the sign is - - paper has a typo
	  D = -( sx*ny + sy*nx )*( nx*tmpx + ny*tmpy );

c         formula (47)	  
	  jump_gxx_x = -D*sign(one,nx);
	  jump_gyy_y =  D*sign(one,ny);
	   	
	  if( (phi(i+1,j)*phi(i,j)) .le. zero ) then
	  
	    sum1 = phi(i,j) + phi(i+1,j);
	    sum2 = phi(i-1,j) + phi(i+2,j);
	    diff = phi(i+1,j) - phi(i,j);
	    
	    pc   =  one_sixteenth*(9.d0*sum1 - sum2)     
            dpc  =  diff*one_over_dx
	    d2pc = (sum2 - sum1)*one_over_2dxsq;
 
c           formula (48) from Smereka     
            pi = - (pc/dpc) - 0.5d0*(d2pc*pc*pc)/(dpc*dpc*dpc);

	    if( abs(pi) .lt. half_dx) then
	      hx_plus = half_dx - pi;
	    else
	      hx_plus = abs( dx*phi(i+1,j)/diff ); 
	    endif
	  
	    delta_x_plus = hx_plus*(abs(nx)+0.5d0*hx_plus*jump_gxx_x);
	  else
	    delta_x_plus = zero;
	  endif
	  
	  if( (phi(i-1,j)*phi(i,j)) .lt. zero ) then
	  
	    sum1 = phi(i-1,j) + phi(i,j);
	    sum2 = phi(i-2,j)+ phi(i+1,j);
	    diff = (phi(i,j) - phi(i-1,j));
	    pc   = one_sixteenth*(9.d0*sum1 - sum2)     
            dpc  = diff*one_over_dx
	    d2pc = (sum2- sum1)*one_over_2dxsq;
     
c           formula (48) from Smereka    
            pi = - (pc/dpc) - 0.5d0*(d2pc*pc*pc)/(dpc*dpc*dpc);	     
	    if( abs(pi) .lt. half_dx) then
	      hx_minus = half_dx + pi;
	    else
	      hx_minus = abs(dx*phi(i-1,j)/diff); 
	    endif
	  
	    delta_x_minus = (abs(nx) - 0.5*hx_minus*jump_gxx_x)
     &	                    *hx_minus;
	  else
	    delta_x_minus = zero;
	  endif
	  
	 
	 if( (phi(i,j+1)*phi(i,j)) .le. zero ) then
	  
	    sum1 = phi(i,j) + phi(i,j+1)
	    sum2 = phi(i,j-1) + phi(i,j+2) 
	    diff = (phi(i,j+1) - phi(i,j))
	    pc   = one_sixteenth*(9.d0*sum1 - sum2)   
            dpc  = diff*one_over_dy
	    d2pc = ( sum2 - sum1 )*one_over_2dysq;
     
c           formula (48) from Smereka 
            pi = - (pc/dpc) - 0.5d0*(d2pc*pc*pc)/(dpc*dpc*dpc);
     	     
	    if( abs(pi) .lt. half_dy) then
	      hy_plus = half_dy - pi;
	    else
	      hy_plus = abs(dy*phi(i,j+1)/diff); 
	    endif
	  
	    delta_y_plus = hy_plus*(abs(ny)+0.5d0*hy_plus*jump_gyy_y);
	  else
	    delta_y_plus = zero;
	  endif  
	  
	  if( (phi(i,j-1)*phi(i,j)) .lt. zero ) then
	   
	    sum1 = phi(i,j-1) + phi(i,j)
	    sum2 = phi(i,j-2) + phi(i,j+1)
	    diff = (phi(i,j) - phi(i,j-1))
	    pc   = one_sixteenth*(9.d0*sum1 - sum2)     
            dpc  = diff*one_over_dy
	    d2pc = (sum2- sum1)*one_over_2dysq;

c           formula (48) from Smereka     
            pi = - (pc/dpc) - 0.5d0*(d2pc*pc*pc)/(dpc*dpc*dpc);
        
	    if( abs(pi) .lt. half_dy) then
	      hy_minus = half_dy + pi;
	    else
	      hy_minus = abs( dy*phi(i,j-1)/diff ); 
	    endif
	  
	    delta_y_minus = (abs(ny)-0.5d0*hy_minus*jump_gyy_y)*
     &                      hy_minus;	 
          else
	    delta_y_minus = zero;
          endif
	    
	             
	  delta(i,j) = ( delta_x_plus + delta_x_minus )*one_over_dxsq
     &               + ( delta_y_plus + delta_y_minus )*one_over_dysq
	     
        enddo
      enddo
c     } end loop over grid 

      return
      end
c } end subroutine
c***********************************************************************
