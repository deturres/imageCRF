c***********************************************************************
c
c  File:        lsm_utilities3d_local.f
c  Copyrights:  (c) 2005 The Trustees of Princeton University and Board of
c                   Regents of the University of Texas.  All rights reserved.
c               (c) 2009 Kevin T. Chu.  All rights reserved.
c  Revision:    $Revision: 149 $
c  Modified:    $Date: 2009-01-18 00:31:09 -0800 (Sun, 18 Jan 2009) $
c  Description: F77 routines for 3D level set method utility subroutines
c               on narrow-bands
c
c***********************************************************************


c***********************************************************************
      subroutine lsm3dMaxNormDiffLOCAL(
     &  max_norm_diff,
     &  field1,
     &  ilo_field1_gb, ihi_field1_gb,
     &  jlo_field1_gb, jhi_field1_gb,
     &  klo_field1_gb, khi_field1_gb,
     &  field2,
     &  ilo_field2_gb, ihi_field2_gb,
     &  jlo_field2_gb, jhi_field2_gb,
     &  klo_field2_gb, khi_field2_gb,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

c     _gb refers to ghostbox 
c     _ib refers to box to include in norm calculation
      integer ilo_field1_gb, ihi_field1_gb
      integer jlo_field1_gb, jhi_field1_gb
      integer klo_field1_gb, khi_field1_gb
      integer ilo_field2_gb, ihi_field2_gb
      integer jlo_field2_gb, jhi_field2_gb
      integer klo_field2_gb, khi_field2_gb
      real field1(ilo_field1_gb:ihi_field1_gb,
     &            jlo_field1_gb:jhi_field1_gb,
     &            klo_field1_gb:khi_field1_gb)
      real field2(ilo_field2_gb:ihi_field2_gb,
     &            jlo_field2_gb:jhi_field2_gb,
     &            klo_field2_gb:khi_field2_gb)
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb

c     local variables      
      real max_norm_diff
      real next_diff
      integer i,j,k,l


c     initialize max_norm_diff
      max_norm_diff = 0.d0

c     { begin loop over indexed points
      do l=nlo_index, nhi_index              
        i=index_x(l)
        j=index_y(l)
        k=index_z(l)

        if( narrow_band(i,j,k) .le. mark_fb ) then
  
          next_diff = abs(field1(i,j,k) - field2(i,j,k))
          if (next_diff .gt. max_norm_diff) then
            max_norm_diff = next_diff
          endif

        endif
      enddo
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dMaxNormDiffControlVolumeLOCAL(
     &  max_norm_diff,
     &  field1,
     &  ilo_field1_gb, ihi_field1_gb,
     &  jlo_field1_gb, jhi_field1_gb,
     &  klo_field1_gb, khi_field1_gb,
     &  field2,
     &  ilo_field2_gb, ihi_field2_gb,
     &  jlo_field2_gb, jhi_field2_gb,
     &  klo_field2_gb, khi_field2_gb,
     &  control_vol,
     &  ilo_control_vol_gb, ihi_control_vol_gb,
     &  jlo_control_vol_gb, jhi_control_vol_gb,
     &  klo_control_vol_gb, khi_control_vol_gb,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

c     _gb refers to ghostbox 
c     _ib refers to box to include in norm calculation
      integer ilo_field1_gb, ihi_field1_gb
      integer jlo_field1_gb, jhi_field1_gb
      integer klo_field1_gb, khi_field1_gb
      integer ilo_field2_gb, ihi_field2_gb
      integer jlo_field2_gb, jhi_field2_gb
      integer klo_field2_gb, khi_field2_gb      
      integer ilo_control_vol_gb, ihi_control_vol_gb
      integer jlo_control_vol_gb, jhi_control_vol_gb
      integer klo_control_vol_gb, khi_control_vol_gb
      real field1(ilo_field1_gb:ihi_field1_gb,
     &                        jlo_field1_gb:jhi_field1_gb,
     &                        klo_field1_gb:khi_field1_gb)
      real field2(ilo_field2_gb:ihi_field2_gb,
     &                        jlo_field2_gb:jhi_field2_gb,
     &                        klo_field2_gb:khi_field2_gb)
      real control_vol
     &                       (ilo_control_vol_gb:ihi_control_vol_gb,
     &                        jlo_control_vol_gb:jhi_control_vol_gb,
     &                        klo_control_vol_gb:khi_control_vol_gb)
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb

c     local variables      
      real max_norm_diff
      real next_diff
      real zero
      integer i,j,k,l


c     initialize max_norm_diff
      zero = 0.d0
      max_norm_diff = zero

c     { begin loop over indexed points
      do l=nlo_index, nhi_index              
        i=index_x(l)
        j=index_y(l)
        k=index_z(l)

        if( narrow_band(i,j,k) .le. mark_fb .and. 
     &      control_vol(i,j,k) .lt. zero   ) then
  
          next_diff = abs(field1(i,j,k) - field2(i,j,k))
          if (next_diff .gt. max_norm_diff) then
            max_norm_diff = next_diff
          endif

        endif
      enddo
c     } end loop over indexed points

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dComputeStableAdvectionDtLOCAL(
     &  dt,
     &  vel_x, vel_y, vel_z,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  dx, dy, dz,
     &  cfl_number,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      real dt

c     _gb refers to ghostbox 
c     _ib refers to box to include in dt calculation
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      real vel_x(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_y(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real vel_z(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real dx, dy, dz
      real inv_dx, inv_dy, inv_dz
      real cfl_number
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb     
      
      integer i,j,k,l
      real max_U_over_dX
      real U_over_dX_cur
      real small_number
      parameter (small_number = @tiny_nonzero_number@)

c     initialize max_U_over_dX to -1
      max_U_over_dX = -1.0d0

c     compute inv_dx, inv_dy, and inv_dz
      inv_dx = 1.d0/dx
      inv_dy = 1.d0/dy
      inv_dz = 1.d0/dz
  
c     { begin loop over indexed points
      do l=nlo_index, nhi_index     
        i=index_x(l)
        j=index_y(l)
        k=index_z(l)

       if( narrow_band(i,j,k) .le. mark_fb ) then

                U_over_dX_cur = abs(vel_x(i,j,k))*inv_dx
     &                        + abs(vel_y(i,j,k))*inv_dy
     &                        + abs(vel_z(i,j,k))*inv_dz

                if (U_over_dX_cur .gt. max_U_over_dX) then
                  max_U_over_dX = U_over_dX_cur  
                endif
          
          endif
        enddo
c       } end loop over indexed points

c     set dt
      dt = cfl_number / (max_U_over_dX + small_number);

      return
      end
c } end subroutine
c***********************************************************************


c***********************************************************************
      subroutine lsm3dComputeStableNormalVelDtLOCAL(
     &  dt,
     &  vel_n,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  phi_x_plus, phi_y_plus, phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  dx, dy, dz, 
     &  cfl_number,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      real dt

c     _gb refers to ghostbox 
c     _ib refers to box to include in dt calculation
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &           jlo_vel_gb:jhi_vel_gb,
     &           klo_vel_gb:khi_vel_gb)
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                 klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_z_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real dx,dy,dz
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb     
      real inv_dx, inv_dy, inv_dz
      real max_dx_sq
      real cfl_number            
      integer i,j,k,l
      real max_H_over_dX
      real H_over_dX_cur
      real phi_x_cur, phi_y_cur, phi_z_cur
      real norm_grad_phi
      real small_number, tol
      parameter (small_number = @tiny_nonzero_number@)
      parameter (tol=@lsmlib_zero_tol@)

c     compute max_dx_sq
      max_dx_sq = max(dx,dy,dz)
      max_dx_sq = max(dx,dy,dz) * max(dx,dy,dz)

c     initialize max_H_over_dX to -1
      max_H_over_dX = -1.0d0

c     compute inv_dx, inv_dy, and inv_dz
      inv_dx = 1.d0/dx
      inv_dy = 1.d0/dy
      inv_dz = 1.d0/dz
      
c     { begin loop over indexed points
      do l=nlo_index, nhi_index     
        i=index_x(l)
        j=index_y(l)
        k=index_z(l)

       if( narrow_band(i,j,k) .le. mark_fb ) then

                  phi_x_cur = max(abs(phi_x_plus(i,j,k)),
     &                            abs(phi_x_minus(i,j,k)))
                  phi_y_cur = max(abs(phi_y_plus(i,j,k)),
     &                            abs(phi_y_minus(i,j,k)))
                  phi_z_cur = max(abs(phi_z_plus(i,j,k)),
     &                            abs(phi_z_minus(i,j,k)))
                  norm_grad_phi = sqrt(phi_x_cur*phi_x_cur 
     &                                +phi_y_cur*phi_y_cur 
     &                                +phi_z_cur*phi_z_cur+max_dx_sq)

                 if ( norm_grad_phi .gt. tol ) then
                   H_over_dX_cur = abs(vel_n(i,j,k)) / norm_grad_phi
     &                           * (  phi_x_cur*inv_dx 
     &                              + phi_y_cur*inv_dy 
     &                              + phi_z_cur*inv_dz )

                   if (H_over_dX_cur .gt. max_H_over_dX) then
                      max_H_over_dX = H_over_dX_cur  
                   endif
            endif
          endif
        enddo
c       } end loop over indexed points
      
c     set dt
      dt = cfl_number / (max_H_over_dX + small_number);

      return
      end
c } end subroutine
c***********************************************************************



c***********************************************************************
      subroutine lsm3dComputeStableNormalVelDtControlVolumeLOCAL(
     &  dt,
     &  vel_n,
     &  ilo_vel_gb, ihi_vel_gb,
     &  jlo_vel_gb, jhi_vel_gb,
     &  klo_vel_gb, khi_vel_gb,
     &  phi_x_plus, phi_y_plus, phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  control_vol,
     &  ilo_control_vol_gb, ihi_control_vol_gb,
     &  jlo_control_vol_gb, jhi_control_vol_gb,
     &  klo_control_vol_gb, khi_control_vol_gb,
     &  control_vol_sgn,
     &  dx, dy, dz, 
     &  cfl_number,
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      real dt

c     _gb refers to ghostbox 
c     _ib refers to box to include in dt calculation
      integer ilo_vel_gb, ihi_vel_gb
      integer jlo_vel_gb, jhi_vel_gb
      integer klo_vel_gb, khi_vel_gb
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      real vel_n(ilo_vel_gb:ihi_vel_gb,
     &                       jlo_vel_gb:jhi_vel_gb,
     &                       klo_vel_gb:khi_vel_gb)
      real phi_x_plus(
     &                   ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                   jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                   klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(
     &                   ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                   jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                   klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_z_plus(
     &                   ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                   jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                   klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_x_minus(
     &                   ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                   jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                   klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_y_minus(
     &                   ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                   jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                   klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(
     &                   ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                   jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                   klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real dx,dy,dz
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb  
      integer ilo_control_vol_gb, ihi_control_vol_gb
      integer jlo_control_vol_gb, jhi_control_vol_gb
      integer klo_control_vol_gb, khi_control_vol_gb
      real control_vol(ilo_control_vol_gb:ihi_control_vol_gb,
     &                 jlo_control_vol_gb:jhi_control_vol_gb,
     &                 klo_control_vol_gb:khi_control_vol_gb)
      integer control_vol_sgn   
      real inv_dx, inv_dy, inv_dz
      real max_dx_sq
      real cfl_number            
      integer i,j,k,l
      real max_H_over_dX
      real H_over_dX_cur
      real phi_x_cur, phi_y_cur, phi_z_cur
      real norm_grad_phi
      real small_number, tol
      parameter (small_number=@tiny_nonzero_number@)
      parameter (tol=@lsmlib_zero_tol@)

c     compute max_dx_sq
      max_dx_sq = max(dx,dy,dz)
      max_dx_sq = max(dx,dy,dz) * max(dx,dy,dz)

c     initialize max_H_over_dX to -1
      max_H_over_dX = -1.0d0

c     compute inv_dx, inv_dy, and inv_dz
      inv_dx = 1.d0/dx
      inv_dy = 1.d0/dy
      inv_dz = 1.d0/dz
  
      if( control_vol_sgn .gt. 0) then   
c     { begin loop over indexed points
        do l=nlo_index, nhi_index     
          i=index_x(l)
          j=index_y(l)
          k=index_z(l)

         if( narrow_band(i,j,k) .le. mark_fb .and. 
     &       control_vol(i,j,k) .gt. 0.d0 ) then

                  phi_x_cur = max(abs(phi_x_plus(i,j,k)),
     &                            abs(phi_x_minus(i,j,k)))
                  phi_y_cur = max(abs(phi_y_plus(i,j,k)),
     &                            abs(phi_y_minus(i,j,k)))
                  phi_z_cur = max(abs(phi_z_plus(i,j,k)),
     &                            abs(phi_z_minus(i,j,k)))
                  norm_grad_phi = sqrt(phi_x_cur*phi_x_cur 
     &                                +phi_y_cur*phi_y_cur 
     &                                +phi_z_cur*phi_z_cur+max_dx_sq)

                 if( norm_grad_phi .gt. tol ) then
                   H_over_dX_cur = abs(vel_n(i,j,k)) / norm_grad_phi
     &                           * (  phi_x_cur*inv_dx 
     &                              + phi_y_cur*inv_dy 
     &                              + phi_z_cur*inv_dz )

                   if (H_over_dX_cur .gt. max_H_over_dX) then
                      max_H_over_dX = H_over_dX_cur  
                   endif
                 endif     
           endif
         enddo
c       } end loop over indexed points
      else
c     { begin loop over indexed points
        do l=nlo_index, nhi_index     
          i=index_x(l)
          j=index_y(l)
          k=index_z(l)

         if( narrow_band(i,j,k) .le. mark_fb .and. 
     &       control_vol(i,j,k) .lt. 0.d0 ) then

                  phi_x_cur = max(abs(phi_x_plus(i,j,k)),
     &                            abs(phi_x_minus(i,j,k)))
                  phi_y_cur = max(abs(phi_y_plus(i,j,k)),
     &                            abs(phi_y_minus(i,j,k)))
                  phi_z_cur = max(abs(phi_z_plus(i,j,k)),
     &                            abs(phi_z_minus(i,j,k)))
                  norm_grad_phi = sqrt(phi_x_cur*phi_x_cur 
     &                                +phi_y_cur*phi_y_cur 
     &                                +phi_z_cur*phi_z_cur+max_dx_sq)

                 if( norm_grad_phi .gt. tol ) then
                    H_over_dX_cur = abs(vel_n(i,j,k)) / norm_grad_phi
     &                            * (  phi_x_cur*inv_dx 
     &                               + phi_y_cur*inv_dy 
     &                               + phi_z_cur*inv_dz )

                 if (H_over_dX_cur .gt. max_H_over_dX) then
                       max_H_over_dX = H_over_dX_cur  
                 endif
             endif      
           endif
         enddo
c       } end loop over indexed points
      endif
 
c     set dt
      dt = cfl_number / (max_H_over_dX + small_number);

      return
      end
c } end subroutine
c***********************************************************************
 
 
 
c***********************************************************************
      subroutine lsm3dComputeStableConstNormalVelDtLOCAL(
     &  dt,
     &  vel_n,
     &  phi_x_plus, phi_y_plus,  phi_z_plus,
     &  ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb,
     &  jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb,
     &  klo_grad_phi_plus_gb, khi_grad_phi_plus_gb,
     &  phi_x_minus, phi_y_minus, phi_z_minus,
     &  ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb,
     &  jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb,
     &  klo_grad_phi_minus_gb, khi_grad_phi_minus_gb,
     &  dx, dy, dz,
     &  cfl_number,     
     &  index_x,
     &  index_y, 
     &  index_z, 
     &  nlo_index, nhi_index,  
     &  narrow_band,
     &  ilo_nb_gb, ihi_nb_gb, 
     &  jlo_nb_gb, jhi_nb_gb, 
     &  klo_nb_gb, khi_nb_gb,
     &  mark_fb)
c***********************************************************************
c { begin subroutine
      implicit none

      real dt

c     _gb refers to ghostbox 
c     _fb refers to box to include in dt calculation
      integer ilo_grad_phi_plus_gb, ihi_grad_phi_plus_gb
      integer jlo_grad_phi_plus_gb, jhi_grad_phi_plus_gb
      integer klo_grad_phi_plus_gb, khi_grad_phi_plus_gb
      integer ilo_grad_phi_minus_gb, ihi_grad_phi_minus_gb
      integer jlo_grad_phi_minus_gb, jhi_grad_phi_minus_gb
      integer klo_grad_phi_minus_gb, khi_grad_phi_minus_gb
      real vel_n
      real phi_x_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb)
      real phi_y_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb) 
      real phi_z_plus(ilo_grad_phi_plus_gb:ihi_grad_phi_plus_gb,
     &                jlo_grad_phi_plus_gb:jhi_grad_phi_plus_gb,
     &                klo_grad_phi_plus_gb:khi_grad_phi_plus_gb) 
      real phi_x_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb) 
      real phi_y_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real phi_z_minus(ilo_grad_phi_minus_gb:ihi_grad_phi_minus_gb,
     &                 jlo_grad_phi_minus_gb:jhi_grad_phi_minus_gb,
     &                 klo_grad_phi_minus_gb:khi_grad_phi_minus_gb)
      real dx,dy,dz
      real cfl_number
      integer nlo_index, nhi_index
      integer index_x(nlo_index:nhi_index)
      integer index_y(nlo_index:nhi_index)
      integer index_z(nlo_index:nhi_index)
      integer ilo_nb_gb, ihi_nb_gb
      integer jlo_nb_gb, jhi_nb_gb
      integer klo_nb_gb, khi_nb_gb
      integer*1 narrow_band(ilo_nb_gb:ihi_nb_gb,
     &                      jlo_nb_gb:jhi_nb_gb,
     &                      klo_nb_gb:khi_nb_gb)
      integer*1 mark_fb     
      
c     local variables    
      integer i,j,k,l
      real inv_dx,inv_dy,inv_dz
      real max_dx_sq
      real max_H_over_dX
      real H_over_dX_cur, abs_vel_n, norm_grad_phi
      real phi_x_cur, phi_y_cur, phi_z_cur
      real small_number
      parameter (small_number = @tiny_nonzero_number@)
  
c     compute max_dx_sq
      max_dx_sq = max(dx,dy)
      max_dx_sq = max(max_dx_sq,dz)
      max_dx_sq = max_dx_sq * max_dx_sq

c     initialize max_H_over_dX to -1
      max_H_over_dX = -1.0d0

c     compute inv_dx, ind_dy and inv_dz
      inv_dx = 1.d0/dx
      inv_dy = 1.d0/dy
      inv_dz = 1.d0/dz

c     { begin loop over indexed points
      do l=nlo_index, nhi_index     
        i=index_x(l)
        j=index_y(l)
        k=index_z(l)

       if( narrow_band(i,j,k) .le. mark_fb ) then

         phi_x_cur = max(abs(phi_x_plus(i,j,k)),
     &                   abs(phi_x_minus(i,j,k)))
         phi_y_cur = max(abs(phi_y_plus(i,j,k)),
     &                  abs(phi_y_minus(i,j,k)))
         phi_z_cur = max(abs(phi_z_plus(i,j,k)),
     &                  abs(phi_z_minus(i,j,k)))

         H_over_dX_cur = abs_vel_n / norm_grad_phi
     &                             * ( phi_x_cur*inv_dx 
     &                               + phi_y_cur*inv_dy 
     &                               + phi_z_cur*inv_dz )

         if (H_over_dX_cur .gt. max_H_over_dX) then
           max_H_over_dX = H_over_dX_cur  
          endif
        endif
      enddo
c     } end loop over indexed points

c     set dt
      dt = cfl_number / (max_H_over_dX + small_number);

      return
      end
c } end subroutine
c***********************************************************************
